import React, { useState } from 'react';
import { Download, FileJson, FileText } from 'lucide-react';

interface ExportButtonProps {
  data: any;
  threadUrl: string;
}

export default function ExportButton({ data, threadUrl }: ExportButtonProps) {
  const [isOpen, setIsOpen] = useState(false);

  const exportJSON = () => {
    const exportData = {
      thread_url: threadUrl,
      timestamp: new Date().toISOString(),
      analysis: data,
      exported_by: 'Reddit:AI'
    };
    
    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `threadsense-analysis-${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);
    setIsOpen(false);
  };

  const exportText = () => {
    let text = `Reddit:AI Analysis Report\n`;
    text += `============================\n\n`;
    text += `Thread URL: ${threadUrl}\n`;
    text += `Analyzed: ${new Date().toLocaleString()}\n\n`;
    text += `SUMMARY\n`;
    text += `-------\n`;
    text += `${data.summary || 'N/A'}\n\n`;
    
    if (data.analysis) {
      text += `METRICS\n`;
      text += `-------\n`;
      text += `Sentiment: ${data.analysis.sentiment_overall || 'N/A'}\n`;
      text += `Sentiment Score: ${data.analysis.sentiment_score || 'N/A'}\n`;
      text += `Toxicity: ${Math.round((data.analysis.toxicity_ratio || 0) * 100)}%\n`;
      text += `Controversy: ${Math.round((data.analysis.controversy_score || 0) * 100)}%\n\n`;
      
      if (data.analysis.top_keywords) {
        text += `KEYWORDS\n`;
        text += `--------\n`;
        text += data.analysis.top_keywords.join(', ') + '\n\n';
      }
      
      if (data.analysis.themes) {
        text += `THEMES\n`;
        text += `------\n`;
        data.analysis.themes.forEach((theme: string, i: number) => {
          text += `${i + 1}. ${theme}\n`;
        });
        text += '\n';
      }
      
      if (data.analysis.key_opinions) {
        text += `KEY OPINIONS\n`;
        text += `------------\n`;
        data.analysis.key_opinions.forEach((op: string, i: number) => {
          text += `${i + 1}. ${op}\n`;
        });
      }
    }
    
    text += `\n---\nGenerated by Reddit:AI\n`;
    
    const blob = new Blob([text], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `threadsense-report-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
    setIsOpen(false);
  };

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-2 px-4 py-2 bg-white border-2 border-gray-300 text-gray-900 rounded-full hover:border-[#FF4500] hover:text-[#FF4500] transition font-semibold"
      >
        <Download className="w-4 h-4" />
        Export
      </button>

      {isOpen && (
        <>
          <div 
            className="fixed inset-0 z-10"
            onClick={() => setIsOpen(false)}
          />
          <div className="absolute right-0 mt-2 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-20">
            <button
              onClick={exportJSON}
              className="w-full px-4 py-3 text-left hover:bg-gray-50 flex items-center gap-2 text-sm font-medium text-gray-700"
            >
              <FileJson className="w-4 h-4 text-blue-600" />
              Export as JSON
            </button>
            <button
              onClick={exportText}
              className="w-full px-4 py-3 text-left hover:bg-gray-50 flex items-center gap-2 text-sm font-medium text-gray-700 border-t border-gray-100"
            >
              <FileText className="w-4 h-4 text-gray-600" />
              Export as TXT
            </button>
          </div>
        </>
      )}
    </div>
  );
}
